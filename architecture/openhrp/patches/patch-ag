--- CollisionDetector/server/Ice/IceAxes.h~	2008-06-18 09:08:37.000000000 +0200
+++ CollisionDetector/server/Ice/IceAxes.h	2008-12-02 00:34:18.000000000 +0100
@@ -14,22 +14,22 @@
 
 	enum PointComponent
 	{
-		_X					= 0,
-		_Y					= 1,
-		_Z					= 2,
-		_W					= 3,
+		ICE_X					= 0,
+		ICE_Y					= 1,
+		ICE_Z					= 2,
+		ICE_W					= 3,
 
 		_FORCE_DWORD		= 0x7fffffff
 	};
 
 	enum AxisOrder
 	{
-		AXES_XYZ			= (_X)|(_Y<<2)|(_Z<<4),
-		AXES_XZY			= (_X)|(_Z<<2)|(_Y<<4),
-		AXES_YXZ			= (_Y)|(_X<<2)|(_Z<<4),
-		AXES_YZX			= (_Y)|(_Z<<2)|(_X<<4),
-		AXES_ZXY			= (_Z)|(_X<<2)|(_Y<<4),
-		AXES_ZYX			= (_Z)|(_Y<<2)|(_X<<4),
+		AXES_XYZ			= (ICE_X)|(ICE_Y<<2)|(ICE_Z<<4),
+		AXES_XZY			= (ICE_X)|(ICE_Z<<2)|(ICE_Y<<4),
+		AXES_YXZ			= (ICE_Y)|(ICE_X<<2)|(ICE_Z<<4),
+		AXES_YZX			= (ICE_Y)|(ICE_Z<<2)|(ICE_X<<4),
+		AXES_ZXY			= (ICE_Z)|(ICE_X<<2)|(ICE_Y<<4),
+		AXES_ZYX			= (ICE_Z)|(ICE_Y<<2)|(ICE_X<<4),
 
 		AXES_FORCE_DWORD	= 0x7fffffff
 	};
--- CollisionDetector/server/Ice/IceHPoint.h~	2008-06-18 09:08:37.000000000 +0200
+++ CollisionDetector/server/Ice/IceHPoint.h	2008-12-02 00:37:26.000000000 +0100
@@ -33,19 +33,19 @@
 		//! Assignment from values
 		inline_	HPoint&		Set(float _x, float _y, float _z, float _w )	{ x  = _x;		y  = _y;	z  = _z;	w  = _w;		return *this;	}
 		//! Assignment from array
-		inline_	HPoint&		Set(const float f[4])							{ x  = f[_X];	y  = f[_Y];	z  = f[_Z];	w  = f[_W];		return *this;	}
+		inline_	HPoint&		Set(const float f[4])							{ x  = f[ICE_X];	y  = f[ICE_Y];	z  = f[ICE_Z];	w  = f[ICE_W];		return *this;	}
 		//! Assignment from another h-point
 		inline_	HPoint&		Set(const HPoint& src)							{ x  = src.x;	y  = src.y;	z  = src.z;	w = src.w;		return *this;	}
 
 		//! Add a vector
 		inline_	HPoint&		Add(float _x, float _y, float _z, float _w )	{ x += _x;		y += _y;	z += _z;	w += _w;		return *this;	}
 		//! Add a vector
-		inline_	HPoint&		Add(const float f[4])							{ x += f[_X];	y += f[_Y];	z += f[_Z];	w += f[_W];		return *this;	}
+		inline_	HPoint&		Add(const float f[4])							{ x += f[ICE_X];	y += f[ICE_Y];	z += f[ICE_Z];	w += f[ICE_W];		return *this;	}
 
 		//! Subtract a vector
 		inline_	HPoint&		Sub(float _x, float _y, float _z, float _w )	{ x -= _x;		y -= _y;	z -= _z;	w -= _w;		return *this;	}
 		//! Subtract a vector
-		inline_	HPoint&		Sub(const float f[4])							{ x -= f[_X];	y -= f[_Y];	z -= f[_Z];	w -= f[_W];		return *this;	}
+		inline_	HPoint&		Sub(const float f[4])							{ x -= f[ICE_X];	y -= f[ICE_Y];	z -= f[ICE_Z];	w -= f[ICE_W];		return *this;	}
 		
 		//! Multiplies by a scalar
 		inline_	HPoint&		Mul(float s)									{ x *= s;		y *= s;		z *= s;		w *= s;			return *this;	}
--- CollisionDetector/server/Ice/IcePoint.h~	2008-06-18 09:08:37.000000000 +0200
+++ CollisionDetector/server/Ice/IcePoint.h	2008-12-02 00:34:09.000000000 +0100
@@ -34,7 +34,7 @@
 		//! Constructor from floats
 		inline_					Point(float _x, float _y, float _z) : x(_x), y(_y), z(_z)	{}
 		//! Constructor from array
-		inline_					Point(const float f[3]) : x(f[_X]), y(f[_Y]), z(f[_Z])		{}
+		inline_					Point(const float f[3]) : x(f[ICE_X]), y(f[ICE_Y]), z(f[ICE_Z])		{}
 		//! Copy constructor
 		inline_					Point(const Point& p) : x(p.x), y(p.y), z(p.z)				{}
 		//! Destructor
@@ -56,7 +56,7 @@
 		//! Assignment from values
 		inline_	Point&			Set(float _x, float _y, float _z)		{ x  = _x;		y  = _y;	z  = _z;			return *this;	}
 		//! Assignment from array
-		inline_	Point&			Set(const float f[3])					{ x  = f[_X];	y  = f[_Y];	z  = f[_Z];			return *this;	}
+		inline_	Point&			Set(const float f[3])					{ x  = f[ICE_X];	y  = f[ICE_Y];	z  = f[ICE_Z];			return *this;	}
 		//! Assignment from another point
 		inline_	Point&			Set(const Point& src)					{ x  = src.x;	y  = src.y;	z  = src.z;			return *this;	}
 
@@ -65,7 +65,7 @@
 		//! Adds a vector
 		inline_	Point&			Add(float _x, float _y, float _z)		{ x += _x;		y += _y;	z += _z;			return *this;	}
 		//! Adds a vector
-		inline_	Point&			Add(const float f[3])					{ x += f[_X];	y += f[_Y];	z += f[_Z];			return *this;	}
+		inline_	Point&			Add(const float f[3])					{ x += f[ICE_X];	y += f[ICE_Y];	z += f[ICE_Z];			return *this;	}
 		//! Adds vectors
 		inline_	Point&			Add(const Point& p, const Point& q)		{ x = p.x+q.x;	y = p.y+q.y;	z = p.z+q.z;	return *this;	}
 
@@ -74,7 +74,7 @@
 		//! Subtracts a vector
 		inline_	Point&			Sub(float _x, float _y, float _z)		{ x -= _x;		y -= _y;	z -= _z;			return *this;	}
 		//! Subtracts a vector
-		inline_	Point&			Sub(const float f[3])					{ x -= f[_X];	y -= f[_Y];	z -= f[_Z];			return *this;	}
+		inline_	Point&			Sub(const float f[3])					{ x -= f[ICE_X];	y -= f[ICE_Y];	z -= f[ICE_Z];			return *this;	}
 		//! Subtracts vectors
 		inline_	Point&			Sub(const Point& p, const Point& q)		{ x = p.x-q.x;	y = p.y-q.y;	z = p.z-q.z;	return *this;	}
 
@@ -341,9 +341,9 @@
 		inline_	PointComponent	LargestAxis()						const
 								{
 									const float* Vals = &x;
-									PointComponent m = _X;
-									if(Vals[_Y] > Vals[m]) m = _Y;
-									if(Vals[_Z] > Vals[m]) m = _Z;
+									PointComponent m = ICE_X;
+									if(Vals[ICE_Y] > Vals[m]) m = ICE_Y;
+									if(Vals[ICE_Z] > Vals[m]) m = ICE_Z;
 									return m;
 								}
 
@@ -351,9 +351,9 @@
 		inline_	PointComponent	ClosestAxis()						const
 								{
 									const float* Vals = &x;
-									PointComponent m = _X;
-									if(AIR(Vals[_Y]) > AIR(Vals[m])) m = _Y;
-									if(AIR(Vals[_Z]) > AIR(Vals[m])) m = _Z;
+									PointComponent m = ICE_X;
+									if(AIR(Vals[ICE_Y]) > AIR(Vals[m])) m = ICE_Y;
+									if(AIR(Vals[ICE_Z]) > AIR(Vals[m])) m = ICE_Z;
 									return m;
 								}
 
@@ -361,9 +361,9 @@
 		inline_	PointComponent	SmallestAxis()						const
 								{
 									const float* Vals = &x;
-									PointComponent m = _X;
-									if(Vals[_Y] < Vals[m]) m = _Y;
-									if(Vals[_Z] < Vals[m]) m = _Z;
+									PointComponent m = ICE_X;
+									if(Vals[ICE_Y] < Vals[m]) m = ICE_Y;
+									if(Vals[ICE_Z] < Vals[m]) m = ICE_Z;
 									return m;
 								}
 
