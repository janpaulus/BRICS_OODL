PKG_ADD(1)              NetBSD General Commands Manual              PKG_ADD(1)

NNAAMMEE
     ppkkgg__aadddd -- a utility for installing and upgrading software package dis-
     tributions

SSYYNNOOPPSSIISS
     ppkkgg__aadddd [--AAffIILLnnRRuuVVvv] [--KK _p_k_g___d_b_d_i_r] [--mm _m_a_c_h_i_n_e] [--PP _d_e_s_t_d_i_r] [--pp _p_r_e_f_i_x]
             [--WW _v_i_e_w_b_a_s_e] [--ww _v_i_e_w] _f_i_l_e _._._.
             [[ftp|http]://[_u_s_e_r][:_p_a_s_s_w_o_r_d]@]_h_o_s_t[:_p_o_r_t][/_p_a_t_h_/]_p_k_g_-_n_a_m_e _._._.

DDEESSCCRRIIPPTTIIOONN
     The ppkkgg__aadddd command is used to extract and upgrade packages that have
     been previously created with the robotpkg_create(1) command.  Packages are
     prepared collections of pre-built binaries, documentation, configura-
     tions, installation instructions and/or other files.  ppkkgg__aadddd can recur-
     sively install other packages that the current package depends on or
     requires from both local disk and via FTP or HTTP.

WWAARRNNIINNGG
     _S_i_n_c_e _t_h_e ppkkgg__aadddd _c_o_m_m_a_n_d _m_a_y _e_x_e_c_u_t_e _s_c_r_i_p_t_s _o_r _p_r_o_g_r_a_m_s _c_o_n_t_a_i_n_e_d
     _w_i_t_h_i_n _a _p_a_c_k_a_g_e _f_i_l_e_, _y_o_u_r _s_y_s_t_e_m _m_a_y _b_e _s_u_s_c_e_p_t_i_b_l_e _t_o _`_`_T_r_o_j_a_n
     _h_o_r_s_e_s_'_' _o_r _o_t_h_e_r _s_u_b_t_l_e _a_t_t_a_c_k_s _f_r_o_m _m_i_s_c_r_e_a_n_t_s _w_h_o _c_r_e_a_t_e _d_a_n_g_e_r_o_u_s
     _p_a_c_k_a_g_e _f_i_l_e_s_.

     _Y_o_u _a_r_e _a_d_v_i_s_e_d _t_o _v_e_r_i_f_y _t_h_e _c_o_m_p_e_t_e_n_c_e _a_n_d _i_d_e_n_t_i_t_y _o_f _t_h_o_s_e _w_h_o _p_r_o_-
     _v_i_d_e _i_n_s_t_a_l_l_a_b_l_e _p_a_c_k_a_g_e _f_i_l_e_s_.  _F_o_r _e_x_t_r_a _p_r_o_t_e_c_t_i_o_n_, _u_s_e _t_h_e _d_i_g_i_t_a_l
     _s_i_g_n_a_t_u_r_e_s _p_r_o_v_i_d_e_d _w_h_e_r_e _p_o_s_s_i_b_l_e _(_s_e_e _t_h_e pkg_install.conf(_5)_)_, _o_r_,
     _f_a_i_l_i_n_g _t_h_a_t_, _u_s_e tar(_1) _t_o _e_x_t_r_a_c_t _t_h_e _p_a_c_k_a_g_e _f_i_l_e_, _a_n_d _i_n_s_p_e_c_t _i_t_s
     _c_o_n_t_e_n_t_s _a_n_d _s_c_r_i_p_t_s _t_o _e_n_s_u_r_e _i_t _p_o_s_e_s _n_o _d_a_n_g_e_r _t_o _y_o_u_r _s_y_s_t_e_m_'_s
     _i_n_t_e_g_r_i_t_y_.  _P_a_y _p_a_r_t_i_c_u_l_a_r _a_t_t_e_n_t_i_o_n _t_o _a_n_y _+_I_N_S_T_A_L_L _o_r _+_D_E_I_N_S_T_A_L_L _f_i_l_e_s_,
     _a_n_d _i_n_s_p_e_c_t _t_h_e _+_C_O_N_T_E_N_T_S _f_i_l_e _f_o_r @@ccwwdd_, @@mmooddee _(_c_h_e_c_k _f_o_r _s_e_t_u_i_d_)_,
     @@ddiirrrrmm_, @@eexxeecc_, _a_n_d @@uunneexxeecc _d_i_r_e_c_t_i_v_e_s_, _a_n_d_/_o_r _u_s_e _t_h_e robotpkg_info(_1) _c_o_m_m_a_n_d
     _t_o _e_x_a_m_i_n_e _t_h_e _p_a_c_k_a_g_e _f_i_l_e_.

OOPPTTIIOONNSS
     The following command line arguments are supported:

     _p_k_g_-_n_a_m_e [_._._.]
             The named packages are installed.  ppkkgg__aadddd will first try to use
             _p_k_g_-_n_a_m_e as full URL or path name without any wildcard process-
             ing.  If that fails, ppkkgg__aadddd will try to match packages using
             wildcard processing.  If that fails as well and _p_k_g_-_n_a_m_e does not
             contain any /, the entries of the PKG_PATH variable are searched
             using the wildcard processing rules.

     --AA      Mark package as installed automatically, as dependency of another
             package.  You can use
                   ppkkgg__aaddmmiinn sseett aauuttoommaattiicc==YYEESS
             to mark packages this way after installation, and
                   ppkkgg__aaddmmiinn uunnsseett aauuttoommaattiicc
             to remove the mark.  If you ppkkgg__aadddd a package without specifying
             --AA after it had already been automatically installed, the mark is
             removed.

     --ff      Force installation to proceed even if prerequisite packages are
             not installed or the install script fails.  Although ppkkgg__aadddd will
             still try to find and auto-install missing prerequisite packages,
             a failure to find one will not be fatal.  This flag also over-
             rides the fatal error when the operating system or architecture
             the package was built on differ from that of the host.

     --II      If an installation script exists for a given package, do not exe-
             cute it.

     --KK _p_k_g___d_b_d_i_r
             Set _p_k_g___d_b_d_i_r as the package database directory.  If this option
             isn't specified, then the package database directory is taken
             from the value of the environment variable PKG_DBDIR if it's set,
             otherwise it defaults to _/_v_a_r_/_d_b_/_p_k_g.

     --LL      Don't add the package to any views after installation.

     --mm      Override the machine architecture returned by uname with _m_a_c_h_i_n_e.

     --nn      Don't actually install a package, just report the steps that
             would be taken if it was.

     --PP _d_e_s_t_d_i_r
             Prefix all file and directory names with _d_e_s_t_d_i_r.  For packages
             without install scripts this has the same behavior as using
             chroot.

     --pp _p_r_e_f_i_x
             Set _p_r_e_f_i_x as the directory in which to extract files from a
             package.  If a package has set its default directory, it will be
             overridden by this flag.  Note that only the first @@ccwwdd directive
             will be replaced, since ppkkgg__aadddd has no way of knowing which
             directory settings are relative and which are absolute.  Only one
             directory transition is supported and the second one is expected
             to go into _p_k_g_d_b.

     --RR      Do not record the installation of a package.  This implies --II.
             This means that you cannot deinstall it later, so only use this
             option if you know what you are doing!

     --uu      If the package that's being installed is already installed, an
             update is performed.  It is currently not possible to update to
             an identical version.  If this is specified twice, then any
             dependent packages that are too old will also be updated to ful-
             fill the dependency.  See below for a more detailed description
             of the process.

     --VV      Print version number and exit.

     --vv      Turn on verbose output.

     --WW _v_i_e_w_b_a_s_e
             Set _v_i_e_w_b_a_s_e as the base directory for the managed views.  The
             default _v_i_e_w_b_a_s_e directory is set by robotpkg_view(1).  This value
             also may be set from the LOCALBASE environment variable.

     --ww _v_i_e_w
             Set the _v_i_e_w to which packages should be added after installa-
             tion.  The default _v_i_e_w is set by robotpkg_view(1).  This value also
             may be set from the PKG_VIEW environment variable.

     One or more _p_k_g_-_n_a_m_e arguments may be specified, each being either a file
     containing the package (these usually ending with the ``.tgz'' suffix) or
     a URL pointing at a file available on an ftp or web site.  Thus you may
     extract files directly from their anonymous ftp or WWW locations (e.g.,
     ppkkgg__aadddd ftp://ftp.NetBSD.org/pub/robotpkg/pack-
     ages/NetBSD/i386/3.1_2007Q2/shells/bash-3.2.9.tgz or ppkkgg__aadddd
     http://www.example.org/packages/screen-4.0.tbz).  Note:  For ftp trans-
     fers, if you wish to use _p_a_s_s_i_v_e _m_o_d_e ftp in such transfers, set the
     variable _F_T_P___P_A_S_S_I_V_E___M_O_D_E to some value in your environment.  Otherwise,
     the more standard ACTIVE mode may be used.  If ppkkgg__aadddd consistently fails
     to fetch a package from a site known to work, it may be because you have
     a firewall that demands the usage of _p_a_s_s_i_v_e _m_o_d_e ftp.

TTEECCHHNNIICCAALL DDEETTAAIILLSS
     ppkkgg__aadddd extracts each package's meta data (including the ``packing
     list'') to memory and then runs through the following sequence to fully
     extract the contents of the package:

           1.   A check is made to determine if the package or another version
                of it is already recorded as installed.  If it is, installa-
                tion is terminated if the --uu option is not given.

                If the --uu option is given, it's assumed the package should be
                replaced by the new version instead.  Before doing so, all
                packages that depend on the pkg being upgraded are checked if
                they also work with the new version.  If that test is success-
                ful, replacing is prepared by moving an existing _+_R_E_Q_U_I_R_E_D___B_Y
                file aside (if it exists), and running robotpkg_delete(1) on the
                installed package.  Installation then proceeds as if the pack-
                age was not installed, and restores the _+_R_E_Q_U_I_R_E_D___B_Y file
                afterwards.

           2.   The package build information is extracted from the
                _+_B_U_I_L_D___I_N_F_O file and compared against the result of uname(3).
                If the operating system or architecture of the package differ
                from that of the host, installation is aborted.  This behavior
                is overridable with the --ff flag.

           3.   The package build information from _+_B_U_I_L_D___I_N_F_O is then checked
                for USE_ABI_DEPENDS=NO (or IGNORE_RECOMMENDED).  If the pack-
                age was built with ABI dependency recommendations ignored, a
                warning will be issued.

           4.   A check is made to determine if the package conflicts (from
                @@ppkkggccffll directives, see robotpkg_create(1)) with an already
                recorded as installed package or if an installed package con-
                flicts with the package.  If it is, installation is termi-
                nated.

           5.   The file list of the package is compared to the file lists of
                the installed packages.  If there is any overlap, the instal-
                lation is terminated.

           6.   All package dependencies (from @@ppkkggddeepp directives, see
                robotpkg_create(1)) are read from the packing list.  If any of
                these required packages are not currently installed, an
                attempt is made to find and install it; if the missing package
                cannot be found or installed, the installation is terminated.
                If the --uu option was specified twice, any required packages
                that are installed, but which have a version number that is
                considered to be too old, are also updated.  The dependent
                packages are found according to the normal PKG_PATH rules.

           7.   If the package contains an _i_n_s_t_a_l_l script, it is executed with
                the following arguments:

                _p_k_g_-_n_a_m_e      The name of the package being installed.

                PPRREE--IINNSSTTAALLLL   Keyword denoting that the script is to perform
                              any actions needed before the package is
                              installed.

                If the _i_n_s_t_a_l_l script exits with a non-zero status code, the
                installation is terminated.

           8.   The files from the file list are extracted to the chosen pre-
                fix.

           9.   If an _i_n_s_t_a_l_l script exists for the package, it is executed
                with the following arguments:

                _p_k_g___n_a_m_e      The name of the package being installed.

                PPOOSSTT--IINNSSTTAALLLL  Keyword denoting that the script is to perform
                              any actions needed after the package has been
                              installed.

           10.  After installation is complete, a copy of the packing list,
                _d_e_i_n_s_t_a_l_l script, description, and display files are copied
                into _/_v_a_r_/_d_b_/_p_k_g_/_<_p_k_g_-_n_a_m_e_> for subsequent possible use by
                robotpkg_delete(1).  Any package dependencies are recorded in the
                other packages' _/_v_a_r_/_d_b_/_p_k_g_/_<_o_t_h_e_r_-_p_k_g_>_/_+_R_E_Q_U_I_R_E_D___B_Y file (if
                an alternate package database directory is specified, then it
                overrides the _/_v_a_r_/_d_b_/_p_k_g path shown above).

           11.  If the package is a depoted package, then add it to the
                default view.

           12.  Finally, if we were upgrading a package, any _+_R_E_Q_U_I_R_E_D___B_Y file
                that was moved aside before upgrading was started is now moved
                back into place.

     The _i_n_s_t_a_l_l script is called with the environment variable PKG_PREFIX set
     to the installation prefix (see the --pp option above).  This allows a
     package author to write a script that reliably performs some action on
     the directory where the package is installed, even if the user might
     change it with the --pp flag to ppkkgg__aadddd.  The scripts are also called with
     the PKG_METADATA_DIR environment variable set to the location of the _+_*
     meta-data files, and with the PKG_REFCOUNT_DBDIR environment variable set
     to the location of the package reference counts database directory.  If
     the --PP flag was given to ppkkgg__aadddd, PKG_DESTDIR will be set to _d_e_s_t_d_i_r.

EENNVVIIRROONNMMEENNTT
     LOCALBASE   This is the location of the _v_i_e_w_b_a_s_e directory in which all
                 the views are managed.  The default _v_i_e_w_b_a_s_e directory is
                 _/_u_s_r_/_p_k_g.

     PKG_DBDIR   If the --KK flag isn't given, then PKG_DBDIR is the location of
                 the package database directory.  The default package database
                 directory is _/_v_a_r_/_d_b_/_p_k_g.

     PKG_PATH    The value of the PKG_PATH variable overrides the
                 pkg_install.conf(5) variable of the same name.  It is used if
                 a given package can't be found, it's usually set to
                 _/_u_s_r_/_p_k_g_s_r_c_/_p_a_c_k_a_g_e_s_/_A_l_l.  The environment variable should be
                 a series of entries separated by semicolons.  Each entry con-
                 sists of a directory name or URL.  The current directory may
                 be indicated implicitly by an empty directory name, or
                 explicitly by a single period.

     PKG_REFCOUNT_DBDIR
                 Location of the package reference counts database directory.
                 The default location is the path to the package database
                 directory with ``.refcount'' appended to the path, e.g.
                 _/_v_a_r_/_d_b_/_p_k_g_._r_e_f_c_o_u_n_t.

     PKG_VIEW    The default view can be specified in the PKG_VIEW environment
                 variable.

EEXXAAMMPPLLEESS
     In all cases, ppkkgg__aadddd will try to install binary packages listed in
     dependencies list.

     You can specify a compiled binary package explicitly on the command line.

     # robotpkg_add /usr/robotpkg/packages/All/tcsh-6.14.00.tgz

     If you omit the version number, ppkkgg__aadddd will install the latest version
     available.  With --vv, ppkkgg__aadddd emits more messages to terminal.

     # robotpkg_add -v /usr/robotpkg/packages/All/unzip

     You can grab a compiled binary package from remote location by specifying
     a URL.  The URL can be put into an environment variable, PKG_PATH.

     # robotpkg_add -v ftp://ftp.NetBSD.org/pub/robotpkg/packages/NetBSD/i386/3.1_2007Q2/All/firefox-2.0.0.4.tgz

     # export PKG_PATH=ftp://ftp.NetBSD.org/pub/robotpkg/packages/NetBSD/i386/3.1_2007Q2/All
     # robotpkg_add -v firefox

     Over time, as problems are found in packages, they will be moved from the
     _A_l_l subdirectory into the _v_u_l_n_e_r_a_b_l_e subdirectory.  If you want to accept
     vulnerable packages by default (and know what you are doing), you can add
     the _v_u_l_n_e_r_a_b_l_e directory to your PKG_PATH like this:

     # export PKG_PATH="ftp://ftp.NetBSD.org/pub/robotpkg/packages/NetBSD/i386/3.1_2007Q2/All/;ftp://ftp.NetBSD.org/pub/robotpkg/packages/NetBSD/i386/3.1_2007Q2/vulnerable/"

     (The quotes are needed because semicolon (`;') is a shell meta-charac-
     ter.)  If you do this, consider using the audit capabilities in
     robotpkg_admin(1) and running it after every ppkkgg__aadddd.

CCOONNFFIIGGUURRAATTIIOONN VVAARRIIAABBLLEESS
     The following variables change the behavior of ppkkgg__aadddd and are described
     in pkg_install.conf(5):
           CHECK_LICENSE
           CHECK_VULNERABILITIES
           CERTIFICATE_ANCHOR_PKGS
           CERTIFICATE_CHAIN
           VERIFIED_INSTALLATION

SSEEEE AALLSSOO
     robotpkg_admin(1), robotpkg_create(1), robotpkg_delete(1), robotpkg_info(1), tar(1),
     mktemp(3), sysconf(3), pkg_install.conf(5), robotpkg(7)

AAUUTTHHOORRSS
     Jordan Hubbard
             Initial work and ongoing development.
     John Kohl
             NetBSD refinements.
     Hubert Feyrer
             NetBSD wildcard dependency processing, pkgdb, upgrading, etc.
     Thomas Klausner
             HTTP support.
     Joerg Sonnenberger
             Rewrote most of the code base to work without external commands.

BBUUGGSS
     Package upgrading needs a lot more work to be really universal.

     Sure to be others.

NetBSD 5.0                      August 6, 2009                      NetBSD 5.0
