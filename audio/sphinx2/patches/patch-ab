--- /dev/null	2008-04-12 20:37:33.000000000 +0200
+++ src/libsphinx2ad/ad_oss_netbsd.c	2008-04-12 22:51:03.000000000 +0200
@@ -0,0 +1,235 @@
+/* ====================================================================
+ * Copyright (c) 1999-2001 Carnegie Mellon University.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer. 
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * This work was supported in part by funding from the Defense Advanced 
+ * Research Projects Agency and the National Science Foundation of the 
+ * United States of America, and the CMU Sphinx Speech Consortium.
+ *
+ * THIS SOFTWARE IS PROVIDED BY CARNEGIE MELLON UNIVERSITY ``AS IS'' AND 
+ * ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
+ * NOR ITS EMPLOYEES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * ====================================================================
+ *
+ */
+/* Sphinx II libad (FreeBSD)
+ * ^^^^^^^^^^^^^^^^^^^^^^^
+ * $Id: ad_oss_bsd.c,v 1.7 2004/07/27 20:51:16 egouvea Exp $
+ *
+ * John G. Dorsey (jd5q+@andrew.cmu.edu)
+ * Engineering Design Research Center
+ * Carnegie Mellon University
+ * ********************************************************************
+ * 
+ * REVISION HISTORY
+ *
+ * 28-Jan-2000  Alan W Black (awb@cs.cmu.edu. added FreeBSD support (by
+                simply cloning the linux support).
+ * 09-Aug-1999  Kevin Lenzo (lenzo@cs.cmu.edu) at Cernegie Mellon University.
+ *              Incorporated nickr@cs.cmu.edu's changes (marked below) and
+ *              SPS_EPSILON to allow for sample rates that are "close enough".
+ * 
+ * 15-Jun-1999	M. K. Ravishankar (rkm@cs.cmu.edu) Consolidated all ad functions into
+ *		this one file.  Added ad_open_sps().
+ * 		Other cosmetic changes for consistency (e.g., use of err.h).
+ * 
+ * 18-May-1999	Kevin Lenzo (lenzo@cs.cmu.edu) added <errno.h>.
+ */
+
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/ioctl.h>
+#include <sys/audioio.h>
+#include <errno.h>
+
+#include "s2types.h"
+#include "ad.h"
+
+#define AUDIO_FORMAT AFMT_S16_LE	/* 16-bit signed, little endian */
+#define INPUT_GAIN   (80)
+
+#define SPS_EPSILON   200
+
+#ifndef SNDCTL_DSP_SETDUPLEX
+#define SNDCTL_DSP_SETDUPLEX -1
+#endif
+
+ad_rec_t *ad_open_sps (int32 sps) {
+    ad_rec_t *handle;
+    int32 dspFD;
+    int32 noblock=1;
+    int32 sampleRate;
+    struct audio_info ainfo;
+
+    if (sps != DEFAULT_SAMPLES_PER_SEC) {
+      if(abs(sps - DEFAULT_SAMPLES_PER_SEC) <= SPS_EPSILON) {
+	fprintf(stderr, "Audio sampling rate %d is within %d of %d samples/sec\n",
+		sps, SPS_EPSILON, DEFAULT_SAMPLES_PER_SEC);
+      } else {
+	fprintf(stderr, "Audio sampling rate %d not supported; must be %d samples/sec\n",
+		sps, DEFAULT_SAMPLES_PER_SEC);
+	return NULL;
+      }
+    }
+    sampleRate = sps;
+    
+    /* Used to have O_NDELAY. */
+    if((dspFD = open ("/dev/audio", O_RDONLY))<0){
+	if (errno == EBUSY)
+	    fprintf(stderr, "Audio device busy\n");
+	else
+	    fprintf(stderr, "Failed to open audio device: %s\n", strerror(errno));
+	return NULL;
+    }
+            
+    if (ioctl (dspFD, AUDIO_FLUSH, 0) < 0){
+	fprintf(stderr, "Audio ioctl(RESET) failed: %s\n", strerror(errno));
+	close (dspFD);
+	return NULL;
+    }
+
+    if (ioctl (dspFD, AUDIO_GETINFO, &ainfo) < 0){
+	fprintf(stderr, "Audio ioctl(SETFMT 0x) failed: %s\n", strerror(errno));
+	close (dspFD);
+	return NULL;
+    }
+    ainfo.play.sample_rate = sampleRate;
+    ainfo.record.sample_rate = sampleRate;
+    ainfo.record.precision = 16;
+    ainfo.play.precision = 16;
+    ainfo.record.encoding = AUDIO_ENCODING_SLINEAR;
+    ainfo.play.encoding = AUDIO_ENCODING_SLINEAR;
+    ainfo.mode = AUMODE_RECORD;
+
+    if (ioctl (dspFD, AUDIO_SETINFO, &ainfo) < 0) {
+	fprintf(stderr, "Audio ioctl(SPEED %d) failed %s\n", sampleRate, strerror(errno));
+	close (dspFD);
+	return NULL;
+    }
+    
+    if (ioctl (dspFD, FIONBIO, &noblock) < 0){
+	fprintf(stderr, "Audio ioctl(RESET) failed: %s\n", strerror(errno));
+	close (dspFD);
+	return NULL;
+    }
+
+    if ((handle = (ad_rec_t *) calloc (1, sizeof(ad_rec_t))) == NULL) {
+      fprintf(stderr, "calloc(%d) failed\n", sizeof(ad_rec_t));
+      abort();
+    }
+
+    handle->dspFD = dspFD;
+    handle->recording = 0;
+    handle->sps = sps;
+    handle->bps = sizeof(int16);
+
+    return(handle);
+}
+
+ad_rec_t *ad_open ( void )
+{
+    return ad_open_sps (DEFAULT_SAMPLES_PER_SEC);
+}
+
+int32 ad_close (ad_rec_t *handle)
+{
+    if (handle->dspFD < 0)
+	return AD_ERR_NOT_OPEN;
+    
+    if (handle->recording) {
+	if (ad_stop_rec (handle) < 0)
+	    return AD_ERR_GEN;
+    }
+    
+    close (handle->dspFD);
+    free(handle);
+    
+    return(0);
+}
+
+int32 ad_start_rec (ad_rec_t *handle)
+{
+    if (handle->dspFD < 0)
+	return AD_ERR_NOT_OPEN;
+    
+    if (handle->recording)
+	return AD_ERR_GEN;
+    
+    /* Sample rate, format, input mix settings, &c. are configured
+     * with ioctl(2) calls under Linux. It makes more sense to handle
+     * these at device open time and consider the state of the device
+     * to be fixed until closed.
+     */
+    
+    handle->recording = 1;
+
+    if (ioctl (handle->dspFD, AUDIO_FLUSH, 0) < 0){
+	fprintf(stderr, "Audio ioctl(RESET) failed: %s\n", strerror(errno));
+	return AD_ERR_GEN;
+    }
+
+    return(0);
+}
+
+int32 ad_stop_rec (ad_rec_t *handle)
+{
+    if (handle->dspFD < 0)
+	return AD_ERR_NOT_OPEN;
+    
+    if (! handle->recording)
+	return AD_ERR_GEN;
+        
+    handle->recording = 0;
+    
+    return (0);
+}
+
+int32 ad_read (ad_rec_t *handle, int16 *buf, int32 max)
+{
+    int32 length;
+    
+    length = max * handle->bps;		/* #samples -> #bytes */
+    
+    if ((length = read (handle->dspFD, buf, length)) > 0) {
+#if 0
+	if ((length % handle->bps) != 0)
+	    fprintf(stderr, "Audio read returned non-integral #sample bytes (%d)\n", length);
+#endif
+	length /= handle->bps;
+    }
+    
+    if (length < 0) {
+      if (errno == EAGAIN) { length = 0; } else {
+	fprintf(stderr, "Audio read error\n");
+	return AD_ERR_GEN;
+      }
+    }
+    
+    if ((length == 0) && (! handle->recording))
+	return AD_EOF;
+    
+    return length;
+}
