class YouBotJoint
!!!266993.cpp!!!	YouBotJoint(in jointNo : uint)
    this->jointNumber = jointNo;
    timeTillNextMailboxUpdate = YouBot::getInstance().timeTillNextEthercatUpdate * 2;
    mailboxMsgRetries = 30;
    this->inverseMovementDirection = false;
    this->lowerLimit = 0;
    this->upperLimit = 0;
!!!380401.cpp!!!	setConfigurationParameter(in parameter : JointParameter) : void
    throw ExceptionOODL("Please use YouBotJointParameters");
!!!380529.cpp!!!	getConfigurationParameter(out parameter : JointParameter) : void
    throw ExceptionOODL("Please use YouBotJointParameters");
!!!375921.cpp!!!	setConfigurationParameter(in parameter : YouBotJointParameter) : void
    if (parameter.getType() == API_PARAMETER) {
      if (parameter.getName() == "JointName") {
        this->jointName = static_cast<const JointName&> (parameter).value;
      } else if (parameter.getName() == "GearRatio") {
        this->gearRatio = static_cast<const GearRatio&> (parameter).value;
      } else if (parameter.getName() == "EncoderTicksPerRound") {
        this->encoderTicksPerRound = static_cast<const EncoderTicksPerRound&> (parameter).value;
      }
    } else if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, SET_MESSAGE);

      if (!setValueToMotorContoller(message)) {
        throw ExceptionOODL("Unable to set parameter: " + parameter.getName() + " to joint: " + this->jointName);
      }
    }
!!!376049.cpp!!!	getConfigurationParameter(out parameter : YouBotJointParameter) : void
    if (parameter.getType() == API_PARAMETER) {
      if (parameter.getName() == "JointName") {
        static_cast<JointName&> (parameter).setParameter(this->jointName);
      } else if (parameter.getName() == "GearRatio") {
        static_cast<GearRatio&> (parameter).setParameter(this->gearRatio);
      } else if (parameter.getName() == "EncoderTicksPerRound") {
        static_cast<EncoderTicksPerRound&> (parameter).setParameter(this->encoderTicksPerRound);
      }
    } else if (parameter.getType() == MOTOR_CONTOLLER_PARAMETER) {

      YouBotSlaveMailboxMsg message;
      parameter.getYouBotMailboxMsg(message, GET_MESSAGE);

      if (retrieveValueFromMotorContoller(message)) {
        parameter.setYouBotMailboxMsg(message);
      } else {
        throw ExceptionOODL("Unable to get parameter: " + parameter.getName() + " to joint: " + this->jointName);
      }
    }
!!!402417.cpp!!!	setConfigurationParameter(out parameter : CalibrateJoint) : void
    if (parameter.doCalibration) {
      LOG(info) << "Calibrate Joint: " << this->jointName;

      int calibrationVel = 0; //rpm
      YouBotSlaveMsg messageBuffer;
      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      if (parameter.calibrationDirection == POSITIV) {
        calibrationVel = 1;
      } else if (parameter.calibrationDirection == NEGATIV) {
        calibrationVel = -1;
      } else {
        throw ExceptionOODL("No calibration direction for joint: " + this->jointName);
      }

      if (this->inverseMovementDirection == true) {
        calibrationVel *= -1;
      }


      //we need some movements in velocity control to do sinus commutation
      //    LOG(info) << "Do sinus commutation for joint: " << this->jointName;

      unsigned int movmentTime = 2000; //ms
      unsigned int timePast = 0;
      int32 current = 0; //mA

      //turn in calibration direction
      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.positionOrSpeed = calibrationVel;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

      while ((abs(current) < (abs(parameter.maxCurrent.value()) *1000)) && (timePast < movmentTime)) {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        timePast = timePast + timeTillNextMailboxUpdate;
        messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
        current = messageBuffer.stctInput.actualCurrent;
        //  LOG(info) << "current: " << current << " maxcurrent " << parameter.maxCurrent;
      }

      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.positionOrSpeed = 0;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
      SLEEP_MILLISEC(500);

      //check if the joint has moved enough otherwise move in other direction
      if (timePast < movmentTime) {
        //   LOG(info) << "turn in other direction ";
        messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
        messageBuffer.stctOutput.positionOrSpeed = -calibrationVel;
        YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

        timePast = 0;
        current = 0;
        while ((abs(current) < (abs(parameter.maxCurrent.value()) *1000)) && (timePast < movmentTime)) {
          SLEEP_MILLISEC(timeTillNextMailboxUpdate);
          timePast = timePast + timeTillNextMailboxUpdate;
          messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
          current = messageBuffer.stctInput.actualCurrent;
          //  LOG(info) << "current: " << current << " maxcurrent " << parameter.maxCurrent;
        }

        messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
        messageBuffer.stctOutput.positionOrSpeed = 0;
        YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
        SLEEP_MILLISEC(500);
      }
      if (timePast < movmentTime) {
        throw ExceptionOODL("Unable to do sinus commutation for joint: " + this->jointName);
      }


      //   LOG(info) << "Sinus commutation finished for joint: " << this->jointName;

      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.positionOrSpeed = calibrationVel;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

      current = 0;
      //turn till a max current is reached
      while (abs(current) < (abs(parameter.maxCurrent.value()) *1000)) {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
        current = messageBuffer.stctInput.actualCurrent;
        //    LOG(info) << "current: " << current << " maxcurrent " << parameter.maxCurrent;
      }

      //stop movement
      messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;
      messageBuffer.stctOutput.positionOrSpeed = 0;
      //   LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.positionOrSpeed << " rad_sec " << data.angularVelocity;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

      //set encoder reference position
      SLEEP_MILLISEC(500);
      messageBuffer.stctOutput.controllerMode = SET_POSITION_TO_REFERENCE;
      messageBuffer.stctOutput.positionOrSpeed = 0;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

      //switch to position controll
      SLEEP_MILLISEC(100);
      messageBuffer.stctOutput.controllerMode = POSITION_CONTROL;
      messageBuffer.stctOutput.positionOrSpeed = 0;
      //   LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.positionOrSpeed << " rad_sec " << data.angularVelocity;
      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);

      //     LOG(info) << "Calibration finished for joint: " << this->jointName;
    }

!!!402673.cpp!!!	setConfigurationParameter(out parameter : InverseMovementDirection) : void

    this->inverseMovementDirection = parameter.value;

!!!410353.cpp!!!	setConfigurationParameter(out parameter : JointLimits) : void

    this->lowerLimit = parameter.lowerLimit;
    this->upperLimit = parameter.upperLimit;

!!!418929.cpp!!!	setConfigurationParameter(out parameter : StopJoint) : void
    if (parameter.value) {
      YouBotSlaveMsg messageBuffer;
      messageBuffer.stctOutput.controllerMode = MOTOR_STOP;
      messageBuffer.stctOutput.positionOrSpeed = 0;

      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
    }
!!!419057.cpp!!!	setConfigurationParameter(out parameter : NoMoreAction) : void
    if (parameter.value) {
      YouBotSlaveMsg messageBuffer;
      messageBuffer.stctOutput.controllerMode = NO_MORE_ACTION;
      messageBuffer.stctOutput.positionOrSpeed = 0;

      YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
    }
!!!267249.cpp!!!	setData(in data : JointDataSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    LOG(info) << "Nothing to do";
!!!267377.cpp!!!	getData(out data : JointData) : void
    LOG(info) << "Nothing to do";
!!!246257.cpp!!!	setData(in data : JointAngleSetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void

    if (gearRatio == 0) {
      throw ExceptionOODL("A Gear Ratio of zero is not allowed");
    }


    quantity<plane_angle> lowLimit = ((double) this->lowerLimit / encoderTicksPerRound) * gearRatio * (2.0 * M_PI) * radian;
    quantity<plane_angle> upLimit = ((double) this->upperLimit / encoderTicksPerRound) * gearRatio * (2.0 * M_PI) * radian;

    if (!((data.angle < upLimit) && (data.angle > lowLimit))) {
      std::stringstream errorMessageStream;
      errorMessageStream << "The setpoint angle is out of range. The valid range is between " << lowLimit << " and " << upLimit;
      //    LOG(trace) << "abs_value: " << abs(data.angle) << " abslow " << abs(lowLimit) << " absupper " << abs(upLimit);
      throw ExceptionOODL(errorMessageStream.str());
    }

    YouBotSlaveMsg messageBuffer;
    messageBuffer.stctOutput.controllerMode = POSITION_CONTROL;
    messageBuffer.stctOutput.positionOrSpeed = (int32) round((data.angle.value() * ((double) encoderTicksPerRound / (2.0 * M_PI))) / gearRatio);


    if (this->inverseMovementDirection) {
      messageBuffer.stctOutput.positionOrSpeed *= -1;
    }
    //   LOG(trace) << "value: " << data.angle << " gear " << gearRatio << " encoderperRound " << encoderTicksPerRound << " encPos " << messageBuffer.stctOutput.positionOrSpeed << " joint " << this->jointNumber;
    YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
!!!253169.cpp!!!	getData(out data : JointSensedAngle) : void
    YouBotSlaveMsg messageBuffer;
    messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
    this->parseYouBotErrorFlags();

    if (gearRatio == 0) {
      throw ExceptionOODL("A Gear Ratio of zero is not allowed");
    }
    if (encoderTicksPerRound == 0) {
      throw ExceptionOODL("Zero Encoder Ticks per Round are not allowed");
    }
    //  LOG(trace) << "enc: " << messageBuffer.stctInput.actualPosition;
    data.angle = ((double) messageBuffer.stctInput.actualPosition / encoderTicksPerRound) * gearRatio * (2.0 * M_PI) * radian;

    if (this->inverseMovementDirection) {
      data.angle = -data.angle;
    }
!!!246641.cpp!!!	setData(in data : JointVelocitySetpoint, in communicationMode : SyncMode = NON_BLOCKING) : void
    YouBotSlaveMsg messageBuffer;
    messageBuffer.stctOutput.controllerMode = VELOCITY_CONTROL;

    if (gearRatio == 0) {
      throw ExceptionOODL("A Gear Ratio of 0 is not allowed");
    }

    messageBuffer.stctOutput.positionOrSpeed = (int32) round((data.angularVelocity.value() / (gearRatio * 2.0 * M_PI)) * 60.0);
    if (this->inverseMovementDirection) {
      messageBuffer.stctOutput.positionOrSpeed *= -1;
    }

    //  LOG(trace) << "vel [rpm] " << messageBuffer.stctOutput.positionOrSpeed << " rad_sec " << data.angularVelocity;
    YouBot::getInstance().setMsgBuffer(messageBuffer, this->jointNumber);
!!!253297.cpp!!!	getData(out data : JointSensedVelocity) : void
    YouBotSlaveMsg messageBuffer;
    messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
    this->parseYouBotErrorFlags();

    if (gearRatio == 0) {
      throw ExceptionOODL("A Gear Ratio of 0 is not allowed");
    }
    double motorRPM = messageBuffer.stctInput.actualVelocity;
    //convert RPM of the motor to radian per second of the wheel/joint
    data.angularVelocity = ((motorRPM / 60.0) * gearRatio * 2.0 * M_PI) * radian_per_second;
!!!246385.cpp!!!	getData(out data : JointSensedTemperature) : void
    YouBotSlaveMsg messageBuffer;
    messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
    this->parseYouBotErrorFlags();

    //the formular is taken from the TMCM-174/841: EtherCAT Communication Protocol
    data.temperature = (25.0 + (((messageBuffer.stctInput.driverTemperature - 1.43) / (3.3 * 4095)) / 0.0043)) * boost::units::celsius::degree;

!!!253425.cpp!!!	getData(out data : JointSensedCurrent) : void
    YouBotSlaveMsg messageBuffer;
    messageBuffer = YouBot::getInstance().getMsgBuffer(this->jointNumber);
    this->parseYouBotErrorFlags();
    //convert mili ampere to ampere
    data.current = messageBuffer.stctInput.actualCurrent / 1000.0 * ampere;
!!!281329.cpp!!!	parseYouBotErrorFlags() : void
    YouBotSlaveMsg messageBuffer;
    std::stringstream errorMessageStream;
    errorMessageStream << "Joint " << this->jointNumber << " ";
    std::string errorMessage;
    errorMessage = errorMessageStream.str();


    if (messageBuffer.stctInput.errorFlags & OVER_CURRENT) {
      LOG(error) << errorMessage << "got over current";
      //    throw ExceptionOODL(errorMessage + "got over current");
    }

    if (messageBuffer.stctInput.errorFlags & UNDER_VOLTAGE) {
      LOG(error) << errorMessage << "got under voltage";
      //    throw ExceptionOODL(errorMessage + "got under voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_VOLTAGE) {
      LOG(error) << errorMessage << "got over voltage";
      //   throw ExceptionOODL(errorMessage + "got over voltage");
    }

    if (messageBuffer.stctInput.errorFlags & OVER_TEMPERATURE) {
      LOG(error) << errorMessage << "got over temperature";
      //   throw ExceptionOODL(errorMessage + "got over temperature");
    }

    if (messageBuffer.stctInput.errorFlags & HALTED) {
      //   LOG(error) << errorMessage << "is halted";
      //   throw ExceptionOODL(errorMessage + "is halted");
    }

    if (messageBuffer.stctInput.errorFlags & HALL_SENSOR) {
      LOG(error) << errorMessage << "got hall sensor problem";
      //   throw ExceptionOODL(errorMessage + "got hall sensor problem");
    }

    if (messageBuffer.stctInput.errorFlags & ENCODER) {
      LOG(error) << errorMessage << "got encoder problem";
      //   throw ExceptionOODL(errorMessage + "got encoder problem");
    }

    if (messageBuffer.stctInput.errorFlags & MOTOR_WINDING) {
      LOG(error) << errorMessage << "got motor winding problem";
      //   throw ExceptionOODL(errorMessage + "got motor winding problem");
    }

    if (messageBuffer.stctInput.errorFlags & CYCLE_TIME_VIOLATION) {
      LOG(error) << errorMessage << "the cycle time is violated";
      //   throw ExceptionOODL(errorMessage + "the cycle time is violated");
    }

    if (messageBuffer.stctInput.errorFlags & INIT_SIN_COMM) {
      LOG(error) << errorMessage << "need to initialize the sinus commutation";
      //   throw ExceptionOODL(errorMessage + "need to initialize the sinus commutation");
    }

!!!376177.cpp!!!	retrieveValueFromMotorContoller(out message : YouBotSlaveMailboxMsg) : bool

    bool unvalid = true;
    unsigned int retry = 0;

    YouBot::getInstance().setMailboxMsgBuffer(message, this->jointNumber);

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      YouBot::getInstance().getMailboxMsgBuffer(message, this->jointNumber);
      /*   LOG(trace) << "CommandNumber " << (int) message.stctInput.commandNumber
                 << " moduleAddress " << (int) message.stctInput.moduleAddress
                 << " replyAddress " << (int) message.stctInput.replyAddress
                 << " status " << (int) message.stctInput.status
                 << " value " << message.stctInput.value;
       */
      if (message.stctOutput.commandNumber == message.stctInput.commandNumber &&
              message.stctInput.status == TMCL_STATUS_OK) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      return false;
    } else {
      return true;
    }

!!!346865.cpp!!!	setValueToMotorContoller(in mailboxMsg : YouBotSlaveMailboxMsg) : bool

    YouBotSlaveMailboxMsg mailboxMsgBuffer;
    mailboxMsgBuffer = mailboxMsg;
    bool unvalid = true;
    unsigned int retry = 0;

    YouBot::getInstance().setMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);

    SLEEP_MILLISEC(timeTillNextMailboxUpdate);

    do {
      YouBot::getInstance().getMailboxMsgBuffer(mailboxMsgBuffer, this->jointNumber);
      /*    LOG(trace) << "CommandNumber " << (int) mailboxMsgBuffer.stctInput.commandNumber
                  << " moduleAddress " << (int) mailboxMsgBuffer.stctInput.moduleAddress
                  << " replyAddress " << (int) mailboxMsgBuffer.stctInput.replyAddress
                  << " status " << (int) mailboxMsgBuffer.stctInput.status
                  << " value " << mailboxMsgBuffer.stctInput.value;
       */
      if (mailboxMsgBuffer.stctOutput.commandNumber == mailboxMsgBuffer.stctInput.commandNumber &&
              mailboxMsgBuffer.stctOutput.value == mailboxMsgBuffer.stctInput.value &&
              mailboxMsgBuffer.stctInput.status == TMCL_STATUS_OK) {
        unvalid = false;
      } else {
        SLEEP_MILLISEC(timeTillNextMailboxUpdate);
        retry++;
      }
    } while (retry < mailboxMsgRetries && unvalid);

    if (unvalid) {
      return false;
    } else {
      return true;
    }

