# This file provides default values for variables that may be overridden
# in the MAKECONF file, which is /opt/openrobots/etc/mk.conf by default.
#
# Note: This file is included after the MAKECONF file, so you cannot query
# these default values in the MAKECONF.

# XXX must clean up this file and remove unused stuff

# --- access to protected sites --------------------------------------------

# JRL software
JRL_FTP_USER?=	jrl
JRL_FTP_PASSWD?=


# --- permissions for installed files --------------------------------------

BINOWN?=$(shell ${ID} -n -u)
BINGRP?=$(shell ${ID} -n -g)
BINMODE?=775

SHAREOWN?=$(shell ${ID} -n -u)
SHAREGRP?=$(shell ${ID} -n -g)
SHAREMODE?=664

MANINSTALL?= maninstall catinstall
# Specify manpage installation types.
# Possible: maninstall, catinstall, both types or empty
# Default: maninstall catinstall

MANOWN?=$(shell ${ID} -n -u)
MANGRP?=$(shell ${ID} -n -g)
MANMODE?=444

PKGDIRMODE=775

GZIP?=	-9
# default compression level when compressing files with gzip
# Possible: -[0-9], --fast, --best (see gzip(1))
# Default: -9

#OBJHOSTNAME=
# use hostname-specific object directories, e.g.  work.amnesiac, work.localhost
# OBJHOSTNAME takes precedence over OBJMACHINE (see below).
# Possible: defined, not defined
# Default: not defined

#OBJMACHINE=
# use machine-specific object directories, e.g.  work.i386, work.sparc
# Possible: defined, not defined
# Default: not defined

#PKG_SUFX= .tbz
# Create binary packages with bzip2(1) or gzip(1).
# Possible: .tbz, .tgz
# Default: .tgz

#MAKE_JOBS=	3
#	When defined, specifies the maximum number of jobs ("make -j")
#	that are run in parallel when building packages with the default
#	do-build action. MAKE_JOBS only affects the "build" target,
#	neither "test" nor "install".
#
#	Possible values: any positive integer. Useful values are around
#	the number of processors on the machine.
#
#	Default value: (undefined)
#
#	Warning: This is experimental. Some packages will not build with
#	this. Disabling this for an individual package can be done by
#	setting MAKE_JOBS_SAFE=NO within the per package Makefile.


PKGSRC_LOCKTYPE?= none
# The type of locking which will be done if competing processes attempt to
# do work on one package directory simultaneously.
# + Locking requires that OBJHOSTNAME is set.
# + Locking may require the pkgsrc/pkgtools/shlock package to be installed
#   on certain OS types.
# + Sleep locking means that the process will sleep for ${PKGSRC_SLEEPSECS}
#   seconds, then try to acquire the lock, and sleeping again if it's not
#   available.
# + Once locking will try once to acquire the lock, and then fail.
# Possible: none, sleep, once
# Default: none

PKGSRC_SLEEPSECS?= 5
# The number of seconds to wait when PKGSRC_LOCKTYPE is sleep
# Possible: a positive integer
# Default: 5


#
# The following values are used to manage the packages collection as a whole.
#

#ABI=	
# The ABI to be used, if supported by the Operating System and/or compiler.
# Currently only used under IRIX and explicitly set during bootstrapping
# Only change this if you really know what you're doing -- libraries of
# one ABI can not be linked with libraries of another!
# Possible: 64 (64 bit ABI), 32 (SGI's N32 ABI), undefined (SGI's old o32 ABI)
# Default: determined during bootstrapping

#PKG_DEVELOPER=	yes
# Run a sanity check that package developers want:
#  * run check-shlibs to see that all binaries will find their libs
# Possible: defined, not defined
# Default: not defined

USE_ABI_DEPENDS?=	yes
# Honor package prerequisite ABI recommendations.  If this is set
# to "yes", all entries in ABI_DEPENDS will be added to DEPENDS.
# If set to "no", a warning will be printed if recommendations
# are possibly ignored.
#
# WARNING: This should only be set if you know what you're doing.
# Please read pkgsrc/doc/pkgsrc.txt for details.
#
# Possible: yes, no
# Default: yes

ROBOTPKG_COMPILER?=	gcc
# Compiler type(s) to use for building packages
# Possible: ccache, gcc, gcc42 (see comments in mk/compiler/compiler-vars.mk)
# Default: "gcc"

PKGSRC_SHOW_BUILD_DEFS?=yes
# Show BUILD_DEFS definitions for a package when it is being built
# (BUILD_DEFS are extra definitions which govern how some packages are
# built and behave)
# Possible: "yes", not "yes"
# Default: "yes"

PKGSRC_SHOW_PATCH_ERRORMSG?=yes
# Print a potentially helpful error message when the "patch" stage fails
# Possible: "yes", not "yes"
# Default: "yes"

SYSTEM_PREFIX?= $(call lappend,						\
	$(patsubst %/sbin,%,$(patsubst %/bin,%,$(subst :, ,${PATH})))	\
	/usr								\
	/usr/local							\
	$(if $(filter Darwin,${OPSYS}), /opt/local)			\
,)
# The systems directories where to search for native packages.
# Possible: any path
# Default: ${PATH} with /{s,}bin stripped plus /usr and /usr/local

PREFER_PKGSRC?=		MesaLib Xft2 Xrandr Xrender expat fontconfig	\
			freetype2 glu randrproto renderproto xcursor
PREFER_NATIVE?=		yes
#
# When building packages, whether to prefer the pkgsrc or native
# versions of software that's also part of the base system.  Its value
# can be either yes/no, or a list of packages as named in the
# BUILDLINK_PACKAGES line in a package's buildlink3.mk file.
# Preferences are determined by the most specific instance of the
# package in either PREFER_PKGSRC or PREFER_NATIVE.  If a package is
# specified in neither or in both variables, then PREFER_PKGSRC has
# precedence over PREFER_NATIVE.
#
# Possible: yes, no, or a list of packages

PREFER_NATIVE_PTHREADS?=	yes
# This toggles whether we prefer using the native pthreads implementation
# or the pkgsrc OPR (see pthread.buildlink3.mk).  This setting is
# independent of the PREFER_* variables named above.

#WRKOBJDIR=	/usr/tmp
# build here instead of in pkgsrc
# Possible: any path
# Default: not defined

LOCALBASE?=	$(or ${ROBOTPKG_BASE},/opt/openrobots)
# Where packages will be installed
# Possible: any path
# Default: ${ROBOTPKG_BASE} or /opt/openrobots

CROSSBASE?=	${LOCALBASE}/cross
# Where "cross" category packages install
# Possible: any path
# Default: ${LOCALBASE}/cross

PKG_TOOLS_BIN?=		${LOCALBASE}/sbin
# Pathname of the robotpkg administrative tools.
# Possible: any path
# Default: ${LOCALBASE}/sbin

PKG_DBDIR?=	${LOCALBASE}/var/db/robotpkg
# Pathname of the package database directory.
# Possible: any path
# Default: ${LOCALBASE}/var/db/robotpkg

PKGINFODIR?=	info
# Pathname relative to ${PREFIX} of directory holding the
# info files and the info "dir" (index) file.
# Possible: any path you like, e.g. share/info.
# Default: info (i.e. /usr/pkg/info)
# NOTE: the support for custom setting (not "info") is not complete.
#
# XXX INFO_DIR is obsolete and should be removed after pkgsrc-2006Q1.

PKGMANDIR?=	man
# Pathname relative to ${PREFIX} of directory holding the
# manual pages and man directories.
# Possible: any path you like, e.g. share/man.
# Default: man (i.e. /usr/pkg/man)
# NOTE: the support for custom setting (not "man") is not complete.

DISTDIR?=	${ROBOTPKG_DIR}/distfiles
# Directory where original distribution
# files are stored.
# Possible: any path you like
# Default: /usr/pkgsrc/distfiles

#DIST_PATH=	/cdrom/0/distfiles:${HOME}/distfiles
# colon-delimited list of directories in which to search for
# ${DISTFILES} and ${PATCHFILES}.  If the requested file is not in any
# of the directories in ${DIST_PATH}, it will be downloaded into
# ${DISTDIR}.  If the requested file is in one of the directories in
# ${DIST_PATH}, a symbolic link will be made to it from ${DISTDIR}. 
# ${DIST_PATH} directories will will be searched before ${DISTDIR},
# letting a CD hold the main distfiles archive, and local ${DISTDIR}
# hold any updated distfiles, for example.
# Possible:  any directories
# Default: none

FETCH_CMD?=             ${PKG_TOOLS_BIN}/tnftp
# Default program to fetch the files with pkgsrc.
# Default: ${PKG_TOOLS_BIN}/tnftp
# Possible: any.

OVERRIDE_DIRDEPTH?=     2
# Represents the common directory depth under ${WRKSRC} up to which we
# find the files that need to be overridden.  By default, we search two
# levels down, i.e., */*/file.
# Possible: any integer value
# Default: 2

LIBTOOLIZE_PLIST?=	yes
# This determines whether to expand libtool archives (.la files) in PLISTs
# into the represented library names.
# Possible: yes, no
# Default: yes

PKG_RESUME_TRANSFERS?=	NO
# Used in pkgsrc to resume transfers, if enabled the whole file won't be
# downloaded from scratch again.
# Possible: yes or no.
# Default: no.

PKG_SYSCONFBASE?= ${LOCALBASE}/etc
# This is the main config directory under which all package configuration
# files should be found.
# Possible: any path you like
# Default: ${LOCALBASE}/etc

PACKAGES?=	${ROBOTPKG_DIR}/packages
# Store generated packages on a per-architecture base
# Possible: any path you like
# Default: /usr/pkgsrc/packages


#PASSIVE_FETCH=
# Use ftp(1) in passive mode, for use behind filtering firewalls. 
# (Set by default in ftp(1) in NetBSD-current)
# Possible: defined, not defined
# Default: not defined

PATCH_FUZZ_FACTOR?= -F0
# Fuzz factor to use when applying patches.  Will only be applied when
# using a patch(1) that understands -F.  This should be a "?="
# setting, since package Makefiles may set this value, before
# /etc/mk.conf is read.
# Possible: "-Fn" where n is a number, none
# Default: "-F0"

ACCEPTABLE_LICENSES?=	${DEFAULT_ACCEPTABLE_LICENSES}
# Whitespace-delimited list of the types of license which are
# acceptable for installation. Packages for which you need
# to accept a license will display a message like the following:
# ===> xv-3.10anb9 has an unacceptable license: xv-license.
# ===>     To view the license, enter "/usr/bin/make show-license".
# ===>     To indicate acceptance, add this line to your /etc/mk.conf:
# ===>     ACCEPTABLE_LICENSES+=xv-license
#
# To include the default licences, use the += operator in robotpkg.conf. To
# override the default, use plain = operator.
#
# Default: ${DEFAULT_ACCEPTABLE_LICENSES}

DEFAULT_ACCEPTABLE_LICENSES=\
	meta-pkg	public-domain			\
	2-clause-bsd	modified-bsd	original-bsd	\
	isc		mit		eclipse		\
	gnu-gpl-v2	gnu-gpl-v3	gnu-agpl-v3	\
	gnu-lgpl-v2	gnu-lgpl-v2.1	gnu-lgpl-v3	\
	doc

# Whitespace-delimited list of the types of license which are
# acceptable for installation by default.

EXTRACT_USING?= nbtar
# Use the specified tool to extract tar/ustar archives.
# Possible: gtar, nbtar, pax
# Default: nbtar

#FAILOVER_FETCH=
# Perform a checksum at "make fetch" time.  If the checksum doesn't
# match the stored value, try to retrieve the file from the next site
# in the list
# Possible:  defined, not defined
# Default: not defined

#MASTER_SORT=	.ac.at .at .de .ch .se .fi .no
# Whitespace delimited list of preferred download locations. 
# MASTER_SITES and PATCH_SITES will be reordered according to the hosts'
# address last components.
# Possible: list of domain name suffixes
# Default: none

#MASTER_SORT_REGEX=  ftp://.*/ 
# Same as MASTER_SORT, but takes a regular expression for more
# flexibility in matching.  Regexps defined here have higher priority
# than MASTER_SORT.  This example would prefer ftp transfers over
# anything else.
# Possible: Regexps as in awk(1)
# Default: none

MASTER_SORT_RANDOM?=	NO
# If set to YES or yes, a list of master sites will be randomly intermixed.
# Also, both MASTER_SORT and MASTER_SORT_REGEX may be applied later.
# Possible: yes, no / not defined
# Default: YES

#PATCH_DEBUG=
# Used to debug patches as they are applied
# Possible: defined, not defined
# Default: not defined

#PKG_FC=
# The Fortran compiler used to compile Fortran code contained in
# packages.
# Possible: any Fortran compiler
# Default: none

PRE_ROOT_CMD?=	${TRUE}
# Command to be run by normal user, just before becoming root (see
# SU_CMD) to install the package.  For example, "chmod -R o+w ${WRKDIR}"
# would allow others to write and modify files below ${WRKDIR}.
# Possible: any shell commands
# Default: none

MAKE_SUDO_INSTALL?=	no
# Whether to run install target as SU_USER with SU_CMD.
# Possible: yes/no
# Default: no

SU_CMD?= sudo -u ${SU_USER} ${SH} -c
# Command to perform before "make install", if the user does not have
# an effective uid of SU_USER.  A possible substitute is "su - ${SU_USER}".
# Possible: su, sudo, or priv, with appropriate arguments
# Default: sudo -u ${SU_USER} ${SH} -c

SU_USER?= root
# User that the SU_CMD will su to if the user does not have the effective uid
# of this user.
# Possible: any user name or uid.
# Default: root

#BINPKG_SITES=...
# Whitespace separated list of URLs for binary packages. Directories
# "All" etc. are expected in the named place, variables "rel" and
# "arch" are replaced with OS release ("1.5", ...) and architecture
# ("mipsel", ...)
# Possible: any ftp url, see above.
# Default: ftp://ftp.NetBSD.org/pub/NetBSD/packages/$${rel}/$${arch}

#BIN_INSTALL_FLAGS=
# List of flags passed to pkg_add(8) in the bin_install package.
# Possible: -v, -u, etc. See pkg_add(8)
# Default: (no option)

#LOCALPATCHES=...
# Directory where local patches are stored. See pkgsrc/doc/pkgsrc.txt.
# Possible: Any local directory
# Default: none

#JAVA_HOME=
# Location of jvm to be used by pkgsrc.  Java-based packages will be installed
# in ${LOCALBASE}/lib/java, so that they are available to all jvms.
# 
# Possible: any directory
# Default: home of JVM chosen by ${PKG_JVM}

JDK_HOME?= ${LOCALBASE}/java
# Used by the lang/JDK package to choose an install location
# Possible: any directory, e.g. /usr/jdk
# Default: ${LOCALBASE}/java

PAPERSIZE?=	A4
# Default paper size for packages.
# Possible: A4, Letter.
# Default: A4

#PKG_JVM=
# Used to choose a java virtual machine for packages which use Java.
# ${JAVA_HOME} will be set based on this choice, if unset
# Possible: jdk, sun-jdk, blackdown-jdk13, kaffe (kaffe currently has some problems)
# Default: jdk on NetBSD/i386, blackdown-jdk13 on powerpc, kaffe elsewhere

UNPRIVILEGED?= NO
# Set this to YES to enable unprivileged support (see mk/unprivileged.mk).
# Possible: YES, NO
# Default: NO
